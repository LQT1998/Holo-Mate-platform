version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: holo_mate
      POSTGRES_USER: holo_mate
      POSTGRES_PASSWORD: holo_mate_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Backend Services
  auth_service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://holo_mate:holo_mate_dev@postgres:5432/holo_mate
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/auth_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  ai_service:
    build:
      context: ./backend/ai_service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://holo_mate:holo_mate_dev@postgres:5432/holo_mate
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/ai_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  streaming_service:
    build:
      context: ./backend/streaming_service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://holo_mate:holo_mate_dev@postgres:5432/holo_mate
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/streaming_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  web_app:
    build:
      context: ./frontend/web_app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:8002
      - NEXT_PUBLIC_STREAMING_URL=http://localhost:8003
    depends_on:
      - auth_service
      - ai_service
      - streaming_service
    volumes:
      - ./frontend/web_app:/app
      - /app/node_modules
    command: npm run dev

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  postgres_data:
  redis_data:
  grafana_data:
